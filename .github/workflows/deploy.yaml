name: Docker Deploy Only

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Docker Login
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build & Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/portfolio:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/portfolio:latest

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2_key.pem
          chmod 600 ~/.ssh/ec2_key.pem

      - name: Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key.pem ubuntu@${{ secrets.EC2_PUBLIC_IP }} <<'EOF'
            sudo apt update -y
            sudo apt install -y docker.io
            sudo systemctl enable --now docker
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio:latest
            sudo docker stop portfolio || true
            sudo docker rm portfolio || true
            sudo docker run -d -p 8080:80 --name portfolio --restart always ${{ secrets.DOCKER_USERNAME }}/portfolio:latest
          EOF
























# name: Terraform + Docker Deploy

# on:
#   push:
#     branches:
#       - main

# jobs:
#   terraform:
#     runs-on: ubuntu-latest
#     outputs:
#       ec2_ip: ${{ steps.get-ip.outputs.ec2_ip }}
#     steps:
#       - name: Checkout Repo
#         uses: actions/checkout@v4

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: 1.6.0

#       - name: Configure AWS Credentials
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_REGION }}

#       - name: Terraform Init
#         working-directory: ./terraform
#         run: terraform init

#       - name: Terraform Apply
#         working-directory: ./terraform
#         run: terraform apply -auto-approve

#       - name: Get EC2 IP and Extract Private Key
#         id: get-ip
#         working-directory: ./terraform
#         run: |
#           mkdir -p ./artifacts
#           ip=$(terraform output -raw ec2_public_ip)
#           echo "ec2_ip=$ip" >> $GITHUB_OUTPUT
#           terraform output -raw private_key_pem > ./artifacts/private_key.pem
#           chmod 600 ./artifacts/private_key.pem

#       - name: Upload Private Key Artifact
#         uses: actions/upload-artifact@v4
#         with:
#           name: private-key
#           path: ./terraform/artifacts/private_key.pem

#   deploy:
#     runs-on: ubuntu-latest
#     needs: terraform
#     steps:
#       - name: Checkout Repo
#         uses: actions/checkout@v4

#       - name: Download Private Key Artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: private-key
#           path: ./terraform/artifacts

#       - name: Docker Login
#         run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

#       - name: Build & Push Docker Image
#         run: |
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/portfolio:latest .
#           docker push ${{ secrets.DOCKER_USERNAME }}/portfolio:latest

#       - name: Deploy to EC2
#         run: |
#           chmod 600 ./terraform/artifacts/private_key.pem
#           ssh -o StrictHostKeyChecking=no -i ./terraform/artifacts/private_key.pem ubuntu@${{ needs.terraform.outputs.ec2_ip }} <<'EOF'
#             sudo apt update -y
#             sudo apt install -y docker.io
#             sudo systemctl enable --now docker
#             sudo docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio:latest
#             sudo docker stop portfolio || true
#             sudo docker rm portfolio || true
#             sudo docker run -d -p 80:80 -p 8080:8080 --name portfolio --restart always ${{ secrets.DOCKER_USERNAME }}/portfolio:latest
#           EOF
